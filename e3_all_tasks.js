1 /*В прошлом модуле в разделе «Циклы» вы выполняли следующее задание:
Дан массив. Нужно вывести в консоль количество чётных и нечётных элементов в массиве. Если в массиве есть нулевой элемент, то он учитывается и выводится отдельно. 
При выполнении задания необходимо учесть, что массив может содержать не только числа, но и, например, знаки, null и так далее.
На этот раз оформите решение в виде функции, постарайтесь дать этой функции корректное название, вызовите функцию, проанализируйте синтаксис.*/


function parityCheck(){
    let even = 0;
    let odd = 0;
    let zero = 0;
    for (let i = 0; i < SOME_ARRAY.length; i++) {
        if (typeof SOME_ARRAY[i] == 'number' && !isNaN(SOME_ARRAY[i])) {
            if (SOME_ARRAY[i] == 0) {
                zero++
            } else if (SOME_ARRAY[i] % 2 == 0) {
                even++
            } else {
                odd++
            }
        } 
    }
    console.log('Количество нулевых элементов - ' + zero);
    console.log('Количество четных элементов - ' + even);
    console.log('Количество нечетных элементов - ' + odd);
}

const SOME_ARRAY = [5, 4, 3, 2, 1, 0, 0, 1, 'u', null, NaN];

parityCheck()


**********************************

2 /*Написать функцию, которая принимает на входе любое число (но не больше 1 000), определяет, является ли оно простым,
и выводит простое число или нет. Если введено больше 1 000, то выводится сообщение, что данные неверны. Обратите внимание на числа 0 и 1.
Здесь вам пригодятся знания из предыдущего модуля — циклы и условные операторы.*/

function checkPrime(toСheck){
    let prime = true;
    if (toСheck > 1 && toСheck < 1000){
        for (i = 2; i < toСheck; i++){
            debugger
            if (toСheck % i == 0) {
                prime = false;
                break;
            }
        }
        if (prime) {
            res = `${toСheck} - простое число`
        } else {
            res = `${toСheck} - составное число`
        }

    } else res = 'Данные не верны'
    return res
}

console.log(checkPrime(prompt('введите число от 2 до 1000', 2)));


**********************************

3 /*Написать функцию, которая принимает число как аргумент и возвращает функцию,
которая также принимает число как аргумент и возвращает сумму этих двух чисел. Выведите в консоль результат.*/

function acceptNumber(num1){
    return function(num2){
        return num1 + num2
    }
}

const SUM_FUNC = acceptNumber(+prompt('введите первое число', 1));
const SUM = SUM_FUNC(+prompt('введите второе число', 1));
console.log(SUM);


**********************************

4 /*Напишите функцию, которая принимает два натуральных числа x и n и возвращает x в степени n. Иначе говоря,
умножает x на себя n раз и возвращает результат.
Используйте Arrow Function синтаксис.
Протестируйте функцию на любых значениях и выведите результат в консоль.*/

const FIRST = +prompt('введите первое число', 0);
const LAST = +prompt('введите второе число', 5);

function acceptNumber(start, stop){
    let timerId = setInterval(function() {
        console.log(start);
        if (start == stop){
            clearInterval(timerId)
        }
        start++
    }, 1000);
}

acceptNumber(FIRST, LAST);

**********************************

5 /*Напишите функцию, которая принимает два натуральных числа x и n и возвращает x в степени n.
Иначе говоря, умножает x на себя n раз и возвращает результат.
Используйте Arrow Function синтаксис.
Протестируйте функцию на любых значениях и выведите результат в консоль. */

const FIRST = +prompt('введите первое число', 0);
const LAST = +prompt('введите второе число', 5);

const exponentiation = (a, b) => console.log(a ** b);

exponentiation(FIRST, LAST);

